{
    "swagger": "2.0",
    "info": {
        "description": "This is a sample CRUD API for managing persons.",
        "title": "Person CRUD API",
        "contact": {},
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/",
    "paths": {
        "/person": {
            "get": {
                "description": "Retrieve all persons with pagination and sorting options",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Person"
                ],
                "summary": "Get all persons",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Records per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "name",
                        "description": "Field to sort by",
                        "name": "sortedBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "asc",
                        "description": "Sort order",
                        "name": "sortedOrder",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "data\": []domain.Person, \"current_page\": int, \"total_pages\": int, \"total_records\": int64",
                        "schema": {
                            "$ref": "#/definitions/handler.APIMessage"
                        }
                    },
                    "500": {
                        "description": "error\": \"Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.APIMessage"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new person record in the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Person"
                ],
                "summary": "Create a new person",
                "parameters": [
                    {
                        "description": "Create Person Request",
                        "name": "person",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.CreatePersonRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/domain.Person"
                        }
                    },
                    "400": {
                        "description": "error\": \"Invalid request format or validation error",
                        "schema": {
                            "$ref": "#/definitions/handler.APIMessage"
                        }
                    },
                    "500": {
                        "description": "error\": \"Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.APIMessage"
                        }
                    }
                }
            }
        },
        "/person/{id}": {
            "get": {
                "description": "Retrieve a person by their unique ID.",
                "tags": [
                    "Person"
                ],
                "summary": "Get person by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Person ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.Person"
                        }
                    },
                    "404": {
                        "description": "error\": \"Person not found",
                        "schema": {
                            "$ref": "#/definitions/handler.APIMessage"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a person's details by their unique ID.",
                "tags": [
                    "Person"
                ],
                "summary": "Update person by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Person ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update Person Request",
                        "name": "person",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.CreatePersonRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.Person"
                        }
                    },
                    "400": {
                        "description": "error\": \"Invalid request",
                        "schema": {
                            "$ref": "#/definitions/handler.APIMessage"
                        }
                    },
                    "404": {
                        "description": "error\": \"Person not found",
                        "schema": {
                            "$ref": "#/definitions/handler.APIMessage"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a person by their unique ID.",
                "tags": [
                    "Person"
                ],
                "summary": "Delete person by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Person ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "error\": \"Person not found",
                        "schema": {
                            "$ref": "#/definitions/handler.APIMessage"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "domain.Person": {
            "type": "object",
            "required": [
                "age",
                "name"
            ],
            "properties": {
                "age": {
                    "type": "integer"
                },
                "hobbies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "handler.APIMessage": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "service.CreatePersonRequest": {
            "type": "object",
            "required": [
                "age",
                "hobbies",
                "name"
            ],
            "properties": {
                "age": {
                    "type": "integer",
                    "maximum": 120,
                    "minimum": 0,
                    "example": 25
                },
                "hobbies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 2,
                    "example": "John Doe"
                }
            }
        }
    }
}